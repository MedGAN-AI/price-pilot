-- PricePilot Database Schema for Supabase
-- This file defines the database schema for the PricePilot application

-- Products table
CREATE TABLE IF NOT EXISTS products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sku VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100) NOT NULL,
    base_cost DECIMAL(10, 2) NOT NULL,
    current_price DECIMAL(10, 2) NOT NULL,
    min_price DECIMAL(10, 2),
    max_price DECIMAL(10, 2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS (Row Level Security)
ALTER TABLE products ENABLE ROW LEVEL SECURITY;

-- Create policy for products
CREATE POLICY "Enable read access for authenticated users"
    ON products FOR SELECT
    USING (auth.role() = 'authenticated');

CREATE POLICY "Enable write access for authenticated users"
    ON products FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Enable update access for authenticated users"
    ON products FOR UPDATE
    USING (auth.role() = 'authenticated');

-- Sales data table (historical sales data)
CREATE TABLE IF NOT EXISTS sales (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    total_revenue DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE sales ENABLE ROW LEVEL SECURITY;

-- Create policy for sales
CREATE POLICY "Enable read access for authenticated users"
    ON sales FOR SELECT
    USING (auth.role() = 'authenticated');

CREATE POLICY "Enable write access for authenticated users"
    ON sales FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

-- Price recommendations table
CREATE TABLE IF NOT EXISTS price_recommendations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    current_price DECIMAL(10, 2) NOT NULL,
    recommended_price DECIMAL(10, 2) NOT NULL,
    min_price DECIMAL(10, 2) NOT NULL,
    max_price DECIMAL(10, 2) NOT NULL,
    confidence_score DECIMAL(5, 2) NOT NULL,
    estimated_demand DECIMAL(10, 2) NOT NULL,
    estimated_revenue DECIMAL(10, 2) NOT NULL,
    estimated_profit DECIMAL(10, 2) NOT NULL,
    rationale TEXT NOT NULL,
    applied BOOLEAN DEFAULT FALSE,
    applied_at TIMESTAMP WITH TIME ZONE,
    created_by VARCHAR(255),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE price_recommendations ENABLE ROW LEVEL SECURITY;

-- Create policy for price_recommendations
CREATE POLICY "Enable read access for authenticated users"
    ON price_recommendations FOR SELECT
    USING (auth.role() = 'authenticated');

CREATE POLICY "Enable write access for authenticated users"
    ON price_recommendations FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Enable update access for authenticated users"
    ON price_recommendations FOR UPDATE
    USING (auth.role() = 'authenticated');

-- Price changes history table
CREATE TABLE IF NOT EXISTS price_changes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    old_price DECIMAL(10, 2) NOT NULL,
    new_price DECIMAL(10, 2) NOT NULL,
    changed_by VARCHAR(255) NOT NULL, -- 'system' or username
    rationale TEXT,
    recommendation_id BIGINT REFERENCES price_recommendations(id),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE price_changes ENABLE ROW LEVEL SECURITY;

-- Create policy for price_changes
CREATE POLICY "Enable read access for authenticated users"
    ON price_changes FOR SELECT
    USING (auth.role() = 'authenticated');

CREATE POLICY "Enable write access for authenticated users"
    ON price_changes FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

-- Competitor prices table
CREATE TABLE IF NOT EXISTS competitor_prices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    competitor_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    url TEXT,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS
ALTER TABLE competitor_prices ENABLE ROW LEVEL SECURITY;

-- Create policy for competitor_prices
CREATE POLICY "Enable read access for authenticated users"
    ON competitor_prices FOR SELECT
    USING (auth.role() = 'authenticated');

CREATE POLICY "Enable write access for authenticated users"
    ON competitor_prices FOR INSERT
    WITH CHECK (auth.role() = 'authenticated');

-- Orders table to store customer orders
CREATE TABLE IF NOT EXISTS orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    order_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    status TEXT NOT NULL,
    shipping_address TEXT NOT NULL,
    billing_address TEXT,
    payment_method TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS on orders
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable read access for authenticated users"
    ON orders FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Enable write access for authenticated users"
    ON orders FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update access for authenticated users"
    ON orders FOR UPDATE USING (auth.role() = 'authenticated');

-- Order items table to store line items
CREATE TABLE IF NOT EXISTS order_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Enable RLS on order_items
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable read access for authenticated users"
    ON order_items FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Enable write access for authenticated users"
    ON order_items FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Enable update access for authenticated users"
    ON order_items FOR UPDATE USING (auth.role() = 'authenticated');

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category);
CREATE INDEX IF NOT EXISTS idx_sales_product_id ON sales(product_id);
CREATE INDEX IF NOT EXISTS idx_sales_date ON sales(date);
CREATE INDEX IF NOT EXISTS idx_price_recommendations_product_id ON price_recommendations(product_id);
CREATE INDEX IF NOT EXISTS idx_price_changes_product_id ON price_changes(product_id);
CREATE INDEX IF NOT EXISTS idx_competitor_prices_product_id ON competitor_prices(product_id);
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);

-- Create a view for the latest competitor prices
CREATE OR REPLACE VIEW latest_competitor_prices AS
WITH ranked_prices AS (
    SELECT 
        product_id,
        competitor_name,
        price,
        url,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY product_id, competitor_name ORDER BY timestamp DESC) as rn
    FROM competitor_prices
)
SELECT 
    product_id,
    competitor_name,
    price,
    url,
    timestamp
FROM ranked_prices
WHERE rn = 1;

-- Create a view for product pricing analytics
CREATE OR REPLACE VIEW product_pricing_analytics AS
SELECT
    p.id as product_id,
    p.sku,
    p.name,
    p.category,
    p.base_cost,
    p.current_price,
    p.current_price - p.base_cost as current_margin,
    (p.current_price - p.base_cost) / p.current_price as current_margin_pct,
    COALESCE(
        (SELECT SUM(quantity) FROM sales s WHERE s.product_id = p.id AND s.date >= CURRENT_DATE - INTERVAL '30 days'),
        0
    ) as sales_30d,
    COALESCE(
        (SELECT SUM(total_revenue) FROM sales s WHERE s.product_id = p.id AND s.date >= CURRENT_DATE - INTERVAL '30 days'),
        0
    ) as revenue_30d,
    COALESCE(
        (SELECT AVG(price) FROM latest_competitor_prices lcp WHERE lcp.product_id = p.id),
        NULL
    ) as avg_competitor_price,
    COALESCE(
        (SELECT MIN(price) FROM latest_competitor_prices lcp WHERE lcp.product_id = p.id),
        NULL
    ) as min_competitor_price,
    COALESCE(
        (SELECT MAX(price) FROM latest_competitor_prices lcp WHERE lcp.product_id = p.id),
        NULL
    ) as max_competitor_price,
    (SELECT COUNT(*) FROM price_recommendations pr WHERE pr.product_id = p.id) as recommendation_count,
    (SELECT recommended_price FROM price_recommendations pr WHERE pr.product_id = p.id ORDER BY timestamp DESC LIMIT 1) as latest_recommended_price
FROM products p;